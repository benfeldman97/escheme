/*
  createSchematic.js
  Adds an item to the Drawings table on DynamoDB
*/

//load dependencies
let fs = require('fs'); //file stream
let sizeOf = require('image-size'); //get image dimensions
let DxfParser = require('dxf-parser'); //convert dxf to JSON
let parser = new DxfParser();

//configure AWS
let AWS = require('aws-sdk');
AWS.config.loadFromPath('./config.json');
let dynamodb = new AWS.DynamoDB();

//return a text entity object to be pushed to the entities list property in drawing
//this could be refactored as a separate helper function
let createEntity = (text, type, x, y, textWidth, textHeight) => {
  return {
    "M": {
      "text": {"S": text.toString()},
      "type": {"S": type.toString()},
      "x": {"N": x.toString()},
      "y": {"N": y.toString()},
      "textWidth": {"N": textWidth.toString()},
      "textHeight": {"N": textHeight.toString()}
    }
  }
};

//called from app.js
let createSchematic = (schematic) => {
  let drawingFile = './static/drawings/' + schematic.drawingFile; //assumes drawing file is in this folder
  let drawing = parser.parseSync(fs.readFileSync(drawingFile, 'utf-8')); //returns JSON
  let id = drawing['header']['$FINGERPRINTGUID']; //unique ID generated by CAD to be used as DynamoDB partition key
  let drawingWidth = drawing['header']['$EXTMAX']['x'] + (drawing['header']['$EXTMIN']['x'] > 0 ? drawing['header']['$EXTMIN']['y'] : 0); //border width
  let drawingHeight = drawing['header']['$EXTMAX']['y'] + (drawing['header']['$EXTMIN']['y'] > 0 ? drawing['header']['$EXTMIN']['y'] : 0); //border height
  let imageDimensions = sizeOf('./static/images/' + schematic.imageFile); //assumes image file is in this folder
  let imageWidth = imageDimensions.width;
  let imageHeight = imageDimensions.height;
  let entities = [];
  let textWidth, textHeight;
  //extract only the entity properties we need
  drawing.entities.map((entity) => {
    //TEXT and MTEXT have different JSON properties
    switch(entity.type){
      case "TEXT":
        textWidth = 0.0379206744 * (entity.text.includes("\\P") ? 4 : entity.text.length); //width of one character multiplied by number of characters in a single line
        textHeight = entity.textHeight * (entity.text.includes("\\P") || entity.text.length <= 4 ? 2 : 1); //height of one character multiplied by the number of lines
        entities.push(createEntity(entity.text, entity.type, entity.startPoint.x, entity.startPoint.y, textWidth, textHeight)); //startPoint gives lower left coordinates
        break;
      case "MTEXT":
        //MTEXT objects include a width property--TEXT does not
        textHeight = entity.height * (entity.text.includes("\\P") || entity.text.length <= 4 ? 2 : 1); //height of one character multiplied by the number of lines
        entities.push(createEntity(entity.text, entity.type, entity.position.x, entity.position.y, entity.width, textHeight)); //position gives lower right coordinates
        break;
      default:
        break;
    };
  });

  let params = {
    TableName: "Drawings",
    Item: {
      id: {"S": id.toString().replace(/{|}|-/gi, "")}, //alphanumeric characters only
      name: {"S": schematic.schematicName.toString()}, //DynamoDB only accepts strings as attribute values...
      drawingFile: {"S": schematic.drawingFile.toString()},
      drawingWidth: {"N": drawingWidth.toString()}, //...even if the type is "Number"
      drawingHeight: {"N": drawingHeight.toString()},
      imageFile: {"S": schematic.imageFile.toString()},
      imageWidth: {"N": imageWidth.toString()},
      imageHeight: {"N": imageHeight.toString()},
      entities: {"L": entities}
    }
  };

  dynamodb.putItem(params, (err, data) => {
    if(err)
      console.error("Drawing for", schematic.schematicName, "not uploaded due to error:", JSON.stringify(err, null, 2));
    else
      console.log("Drawing for", schematic.schematicName, "uploaded.");
  });
};

module.exports = createSchematic;
